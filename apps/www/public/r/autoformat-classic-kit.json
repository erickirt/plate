{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "autoformat-classic-kit",
  "type": "registry:component",
  "dependencies": [
    "@platejs/autoformat",
    "@platejs/code-block",
    "@platejs/list-classic"
  ],
  "registryDependencies": [
    "https://platejs.org/r/list-classic-node",
    "https://platejs.org/r/list-classic-toolbar-button"
  ],
  "files": [
    {
      "path": "src/registry/components/editor/plugins/autoformat-classic-kit.tsx",
      "content": "'use client';\n\nimport type { AutoformatBlockRule, AutoformatRule } from '@platejs/autoformat';\nimport type { SlateEditor } from 'platejs';\n\nimport {\n  autoformatArrow,\n  autoformatLegal,\n  autoformatLegalHtml,\n  autoformatMath,\n  AutoformatPlugin,\n  autoformatPunctuation,\n  autoformatSmartQuotes,\n} from '@platejs/autoformat';\nimport { insertEmptyCodeBlock } from '@platejs/code-block';\nimport { toggleList, toggleTaskList, unwrapList } from '@platejs/list-classic';\nimport { ElementApi, isType, KEYS } from 'platejs';\n\nconst preFormat: AutoformatBlockRule['preFormat'] = (editor) =>\n  unwrapList(editor);\n\nconst format = (editor: SlateEditor, customFormatting: any) => {\n  if (editor.selection) {\n    const parentEntry = editor.api.parent(editor.selection);\n\n    if (!parentEntry) return;\n\n    const [node] = parentEntry;\n\n    if (ElementApi.isElement(node) && !isType(editor, node, KEYS.codeBlock)) {\n      customFormatting();\n    }\n  }\n};\n\nconst formatTaskList = (editor: SlateEditor, defaultChecked = false) => {\n  format(editor, () => toggleTaskList(editor, defaultChecked));\n};\n\nconst formatList = (editor: SlateEditor, elementType: string) => {\n  format(editor, () =>\n    toggleList(editor, {\n      type: elementType,\n    })\n  );\n};\n\nconst autoformatMarks: AutoformatRule[] = [\n  {\n    match: '***',\n    mode: 'mark',\n    type: [KEYS.bold, KEYS.italic],\n  },\n  {\n    match: '__*',\n    mode: 'mark',\n    type: [KEYS.underline, KEYS.italic],\n  },\n  {\n    match: '__**',\n    mode: 'mark',\n    type: [KEYS.underline, KEYS.bold],\n  },\n  {\n    match: '___***',\n    mode: 'mark',\n    type: [KEYS.underline, KEYS.bold, KEYS.italic],\n  },\n  {\n    match: '**',\n    mode: 'mark',\n    type: KEYS.bold,\n  },\n  {\n    match: '__',\n    mode: 'mark',\n    type: KEYS.underline,\n  },\n  {\n    match: '*',\n    mode: 'mark',\n    type: KEYS.italic,\n  },\n  {\n    match: '_',\n    mode: 'mark',\n    type: KEYS.italic,\n  },\n  {\n    match: '~~',\n    mode: 'mark',\n    type: KEYS.strikethrough,\n  },\n  {\n    match: '^',\n    mode: 'mark',\n    type: KEYS.sup,\n  },\n  {\n    match: '~',\n    mode: 'mark',\n    type: KEYS.sub,\n  },\n  {\n    match: '==',\n    mode: 'mark',\n    type: KEYS.highlight,\n  },\n  {\n    match: '≡',\n    mode: 'mark',\n    type: KEYS.highlight,\n  },\n  {\n    match: '`',\n    mode: 'mark',\n    type: KEYS.code,\n  },\n];\n\nconst autoformatBlocks: AutoformatRule[] = [\n  {\n    match: '# ',\n    mode: 'block',\n    preFormat,\n    type: KEYS.h1,\n  },\n  {\n    match: '## ',\n    mode: 'block',\n    preFormat,\n    type: KEYS.h2,\n  },\n  {\n    match: '### ',\n    mode: 'block',\n    preFormat,\n    type: KEYS.h3,\n  },\n  {\n    match: '#### ',\n    mode: 'block',\n    preFormat,\n    type: KEYS.h4,\n  },\n  {\n    match: '##### ',\n    mode: 'block',\n    preFormat,\n    type: KEYS.h5,\n  },\n  {\n    match: '###### ',\n    mode: 'block',\n    preFormat,\n    type: KEYS.h6,\n  },\n  {\n    match: '> ',\n    mode: 'block',\n    preFormat,\n    type: KEYS.blockquote,\n  },\n  {\n    match: '```',\n    mode: 'block',\n    preFormat,\n    type: KEYS.codeBlock,\n    format: (editor) => {\n      insertEmptyCodeBlock(editor, {\n        defaultType: KEYS.p,\n        insertNodesOptions: { select: true },\n      });\n    },\n  },\n  // {\n  //   match: '+ ',\n  //   mode: 'block',\n  //   preFormat: openNextToggles,\n  //   type: KEYS.toggle,\n  // },\n  {\n    match: ['---', '—-', '___ '],\n    mode: 'block',\n    type: KEYS.hr,\n    format: (editor) => {\n      editor.tf.setNodes({ type: KEYS.hr });\n      editor.tf.insertNodes({\n        children: [{ text: '' }],\n        type: KEYS.p,\n      });\n    },\n  },\n];\n\nconst autoformatLists: AutoformatRule[] = [\n  {\n    match: ['* ', '- '],\n    mode: 'block',\n    preFormat,\n    type: KEYS.li,\n    format: (editor) => formatList(editor, KEYS.ulClassic),\n  },\n  {\n    match: [String.raw`^\\d+\\.$ `, String.raw`^\\d+\\)$ `],\n    matchByRegex: true,\n    mode: 'block',\n    preFormat,\n    type: KEYS.li,\n    format: (editor) => formatList(editor, KEYS.olClassic),\n  },\n  {\n    match: '[] ',\n    mode: 'block',\n    type: KEYS.taskList,\n    format: (editor) => formatTaskList(editor, false),\n  },\n  {\n    match: '[x] ',\n    mode: 'block',\n    type: KEYS.taskList,\n    format: (editor) => formatTaskList(editor, true),\n  },\n];\n\nexport const AutoformatKit = [\n  AutoformatPlugin.configure({\n    options: {\n      enableUndoOnDelete: true,\n      rules: [\n        ...autoformatBlocks,\n        ...autoformatMarks,\n        ...autoformatSmartQuotes,\n        ...autoformatPunctuation,\n        ...autoformatLegal,\n        ...autoformatLegalHtml,\n        ...autoformatArrow,\n        ...autoformatMath,\n        ...autoformatLists,\n      ].map((rule) => ({\n        ...rule,\n        query: (editor) =>\n          !editor.api.some({\n            match: { type: editor.getType(KEYS.codeBlock) },\n          }),\n      })),\n    },\n  }),\n];\n",
      "type": "registry:component"
    }
  ]
}